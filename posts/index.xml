<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on JO Jaeyoung | 조재영</title>
    <link>https://jaese.github.io/posts/</link>
    <description>Recent content in Posts on JO Jaeyoung | 조재영</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 May 2022 03:08:43 +0900</lastBuildDate><atom:link href="https://jaese.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Running a Service on FreeBSD: the rc.d scripting</title>
      <link>https://jaese.github.io/posts/running-a-service-on-freebsd-rc-d/</link>
      <pubDate>Wed, 04 May 2022 03:08:43 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/running-a-service-on-freebsd-rc-d/</guid>
      <description>Coming from Linux, I thought installing and runnging a service/daemon on FreeBSD was somewhat unintuitive, so I am writing a note.
I had been using FreeBSD 13.0 running on RPi 4 as a router to my home network since I set it up early this year. FreeBSD had been a solid platform. It was interesting and not-too-frustrating to set up the firewall, dhcpd, and DNS server on FreeBSD because they are well integrated with the system.</description>
    </item>
    
    <item>
      <title>Stop Computer Networking</title>
      <link>https://jaese.github.io/posts/stop-computer-networking/</link>
      <pubDate>Tue, 05 Apr 2022 11:57:18 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/stop-computer-networking/</guid>
      <description>While I was following the Kubernetes The Hard Way on the laptop with Vagrant VMs, I was reminded of the conviction that I had been holding: an application generally should not deal with computer networking. That is, it should not concern with host addresses or ports or HTTP protocols or anything. Instead, it should work above a messaging abstraction provided by message brokers like NATS or Kafka or such.
If the application requires low network latency such as video streaming, then it would need to deal with networking.</description>
    </item>
    
    <item>
      <title>Thought: Two Reasons Why Software Is Difficult to Use</title>
      <link>https://jaese.github.io/posts/thought-two-reasons-why-software-is-difficult-to-use/</link>
      <pubDate>Mon, 07 Mar 2022 19:03:30 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/thought-two-reasons-why-software-is-difficult-to-use/</guid>
      <description>I don&amp;rsquo;t have much trust in software. If I can help, I avoid using software. I prefer to walk to the bank than to use online banking. Same for doing government paperworks. Software most of the time doesn&amp;rsquo;t work, or at least, doesn&amp;rsquo;t work the way I expect.
I think the main reasons why using software is confusing, when compared to other domains, are two things: the lack of locality and the lack of observability.</description>
    </item>
    
    <item>
      <title>Raytracing in One Weekend on Ebiten</title>
      <link>https://jaese.github.io/posts/raytracing-ebiten/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jaese.github.io/posts/raytracing-ebiten/</guid>
      <description> I am going to profile it to figure out why this version is much slower than the Zig version.
 https://raytracing.github.io/books/RayTracingInOneWeekend.html https://ebiten.org  </description>
    </item>
    
    <item>
      <title>Setting up a K3S cluster</title>
      <link>https://jaese.github.io/posts/hello-k3s/</link>
      <pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jaese.github.io/posts/hello-k3s/</guid>
      <description>I wanted to set up a Kubernetes cluster on my networking lab that consists of three RPis and a PC, and run some actual workload. I used K3S, a lightweight Kubernetes distribution, because it seemed to be the one to go to for running Kubernetes on RPis, ex. Jeff Geerling&amp;rsquo;s video on installing K3S. For image registry, I tried Harbor open source registry v2.4.1. The cluster ingress is fronted by a reverse proxy.</description>
    </item>
    
    <item>
      <title>Gemini: new internet protocol</title>
      <link>https://jaese.github.io/posts/gemini-protocol/</link>
      <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jaese.github.io/posts/gemini-protocol/</guid>
      <description>Project Gemini is an early NASA human spacefilght program.
The Gemini protocol is a new internet protocol that takes user privacy seriously.
I came across Gemini when I got distracted and was reading about the Gopher protocol. Gopher was interesting to me because I felt the modern web standards were too complicated. From the app developer&amp;rsquo;s perspective, there are so many things you have to be aware of in order to have a website that uses good practices and also meets stakeholders&#39; tastes.</description>
    </item>
    
    <item>
      <title>JAX API</title>
      <link>https://jaese.github.io/posts/hello-jax/</link>
      <pubDate>Sun, 23 Jan 2022 14:58:44 +0000</pubDate>
      
      <guid>https://jaese.github.io/posts/hello-jax/</guid>
      <description>Google&amp;rsquo;s JAX autograd library is an example of a neat, composable API. The following is all that is needed to plot the gradient field of a function using JAX&amp;rsquo;s grad and vmap functions.
 </description>
    </item>
    
    <item>
      <title>Home network v1</title>
      <link>https://jaese.github.io/posts/home-network-v1/</link>
      <pubDate>Sat, 15 Jan 2022 15:15:59 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/home-network-v1/</guid>
      <description>It was long overdue I learned the basics of IP networking, and there wouldn&amp;rsquo;t be a better way than to learn it hands-on by setting up my own home network.
Before then, I&amp;rsquo;d been using the same WiFi hub installed by the ISP when I moved in. (By the way, if you are using the WiFi hub installed by D&amp;rsquo;Live, be aware that it exposes the configuration UI on port 8080 to the Internet.</description>
    </item>
    
    <item>
      <title>A comic strip</title>
      <link>https://jaese.github.io/posts/cartoons/</link>
      <pubDate>Wed, 12 Jan 2022 08:25:37 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/cartoons/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Trying polars, a fast DataFrame library</title>
      <link>https://jaese.github.io/posts/trying-polars/</link>
      <pubDate>Tue, 11 Jan 2022 10:43:31 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/trying-polars/</guid>
      <description>pandas is the de facto standard DataFrame manipulation tool in Python.
Natually, I want to be comfortable using it but, I think the sheer girth of its API is proving to be a major obstacle. I can&amp;rsquo;t go for long before I have to search usages on Stackoverflow for what should be routine tasks. I don&amp;rsquo;t think I can ever grok its date time API.
So, I searched for simpler alternative libraries and found polars.</description>
    </item>
    
    <item>
      <title>FreeBSD on RPi 4</title>
      <link>https://jaese.github.io/posts/freebsd-on-rpi4/</link>
      <pubDate>Tue, 04 Jan 2022 21:11:23 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/freebsd-on-rpi4/</guid>
      <description>As of now, the prebuilt SD card image for RPI (3/4) of FreeBSD 13.0 doesn&amp;rsquo;t run out of the box on RPi 4 due to an issue with the bootloader and requires replacing the bootloader binary on the SD card. If you have a Raspberry PI OS installation and want to try FreeBSD on RPi 4, you can follow these steps:
  Download and flash FreeBSD-13.0-RELEASE-arm64-aarch64-RPI.img.xz to an SD card.</description>
    </item>
    
    <item>
      <title>Revisiting The Project Bootstrapping</title>
      <link>https://jaese.github.io/posts/revisiting-the-project-bootstrapping/</link>
      <pubDate>Sat, 01 Jan 2022 06:47:45 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/revisiting-the-project-bootstrapping/</guid>
      <description>Did you know that AVR is one microcontroller family that can be programmed by bit banging by hand? No computers or USB interfacing required, just plain physical, electrical on-and-offs.
It&amp;rsquo;s true. The in-system programming (ISP) interface of AVR is concise enough that you can write to its flash memory an upwards of 10 to 20 instructions one bit at a time, with a reasonable amount of patience. In comparison, the JTAG type interface used by ARM and MIPS chips is too fiddly to program by hand, I discovered.</description>
    </item>
    
    <item>
      <title>Publishing a Jupyter Notebook</title>
      <link>https://jaese.github.io/posts/publishing-jupyter-notebook/</link>
      <pubDate>Tue, 28 Dec 2021 19:31:47 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/publishing-jupyter-notebook/</guid>
      <description>I wondered if I can publish a rendered Jupyter notebook on my Hugo blog website, in case I have knowledge to share that is in scientific nature..
nb2hugo seems like a good option but it&amp;rsquo;s more involved than pointing to an ipynb file and running a command. So I thought I&amp;rsquo;d use nbconvert instead to convert it to an HTML file and embed it in a post, and have a link on the post that goes to the full page version.</description>
    </item>
    
    <item>
      <title>JWST Launches</title>
      <link>https://jaese.github.io/posts/jwsp-launches/</link>
      <pubDate>Sun, 26 Dec 2021 13:42:41 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/jwsp-launches/</guid>
      <description>James Webb Space Telescope Where is Webb Resources #UnfoldTheUniverse  The successor to the Hubble Space Telescope, the James Webb Space Telescope launched at 2021-12-25T12:20Z from the ESA Launch Facility in French Guiana. It just has finished the starting part of the deployment sequence that spans 6 months, and it is cruising towards L2, 1.5 million km from the earth.
Webb will see the lights emitted when the first stars were born over 13.</description>
    </item>
    
    <item>
      <title>Hello Ebiten</title>
      <link>https://jaese.github.io/posts/hello-ebiten/</link>
      <pubDate>Sat, 25 Dec 2021 00:41:28 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/hello-ebiten/</guid>
      <description>https://ebiten.org</description>
    </item>
    
    <item>
      <title>Ray Tracing in One Weekend on WebAssembly</title>
      <link>https://jaese.github.io/posts/ray-tracing-in-one-week/</link>
      <pubDate>Sat, 18 Dec 2021 23:01:01 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/ray-tracing-in-one-week/</guid>
      <description>samples: 
  div.raytracing-content { } canvas { width: 800px; height: 356px; image-rendering: pixelated; image-rendering: crisp-edges; }  import { instantiate } from &#39;/wasm.js&#39;; const width = 320; const height = 180; const samplesElem = document.querySelector(&#39;.samples&#39;); console.log(samplesElem); (async function start() { const memory = new WebAssembly.Memory({initial: 40, maximum: 40}) const importObject = { &#39;env&#39;: { &#39;memory&#39;: memory, }, }; const { instance, module } = await instantiate(&#39;/raytracing.wasm&#39;, importObject); const exports = instance.</description>
    </item>
    
    <item>
      <title>WASM-4 and Zig</title>
      <link>https://jaese.github.io/posts/wasm4/</link>
      <pubDate>Mon, 15 Nov 2021 02:34:44 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/wasm4/</guid>
      <description>WASM-4 binaries running on browser  *Fancy* graphics   Press R to reset     .wasm4 { padding: 10px; box-sizing: border-box; } #rotating_cube { width: 320px; height: 320px; } #rotating_cube canvas { width: 100%; height: 100%; image-rendering: pixelated; image-rendering: crisp-edges; } #snake { width: 320px; height: 320px; } #snake canvas { width: 100%; height: 100%; image-rendering: pixelated; image-rendering: crisp-edges; }  import { run } from &#34;</description>
    </item>
    
    <item>
      <title>Controlling CO2 sensor and HD44780 LCD display with Raspberry Pi and Go</title>
      <link>https://jaese.github.io/posts/breath-sensor/</link>
      <pubDate>Tue, 09 Nov 2021 18:58:21 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/breath-sensor/</guid>
      <description>This is a digital gas sensor (CCS811) and an LCD display (HD44780), controlled by Raspberry Pi, that I wired together back in 2019. The CS811 sensor reports two values: &amp;lsquo;equivalent carbon dioxide&amp;rsquo; (eCO2), and &amp;lsquo;Volatile Organic Compounds&amp;rsquo; (VOC), PPM. I am not too sure what those terms mean, not strong on chemistry, but nonetheless I wired it to display the reported values on LCD display continuously. I assume high values mean bad.</description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>https://jaese.github.io/posts/hello/</link>
      <pubDate>Fri, 05 Nov 2021 10:58:03 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/hello/</guid>
      <description>My first post.</description>
    </item>
    
  </channel>
</rss>
