<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JO Jaeyoung | 조재영</title>
    <link>https://jaese.github.io/</link>
    <description>Recent content on JO Jaeyoung | 조재영</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Jan 2022 06:47:45 +0900</lastBuildDate><atom:link href="https://jaese.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Revisiting The Project Bootstrapping</title>
      <link>https://jaese.github.io/posts/revisiting-the-project-bootstrapping/</link>
      <pubDate>Sat, 01 Jan 2022 06:47:45 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/revisiting-the-project-bootstrapping/</guid>
      <description>Did you know that AVR is one microcontroller family that can be programmed by bit banging by hand? No computers or USB interfacing required, just plain physical, electrical on-and-offs.
It&amp;rsquo;s true. The in-system programming (ISP) interface of AVR is concise enough that you can write to its flash memory an upwards of 10 to 20 instructions one bit at a time, with a reasonable amount of patience. In comparison, the JTAG type interface used by ARM and MIPS chips is too fiddly to program by hand, I discovered.</description>
    </item>
    
    <item>
      <title>Publishing a Jupyter Notebook</title>
      <link>https://jaese.github.io/posts/publishing-jupyter-notebook/</link>
      <pubDate>Tue, 28 Dec 2021 19:31:47 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/publishing-jupyter-notebook/</guid>
      <description>I wondered if I can publish a rendered Jupyter notebook on my Hugo blog website, in case I have knowledge to share that is in scientific nature..
nb2hugo seems like a good option but it&amp;rsquo;s more involved than pointing to an ipynb file and running a command. So I thought I&amp;rsquo;d use nbconvert instead to convert it to an HTML file and embed it in a post, and have a link on the post that goes to the full page version.</description>
    </item>
    
    <item>
      <title>JWST Launches</title>
      <link>https://jaese.github.io/posts/jwsp-launches/</link>
      <pubDate>Sun, 26 Dec 2021 13:42:41 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/jwsp-launches/</guid>
      <description>James Webb Space Telescope Where is Webb Resources #UnfoldTheUniverse  The successor to the Hubble Space Telescope, the James Webb Space Telescope launched at 2021-12-25T12:20Z from the ESA Launch Facility in French Guiana. It just has finished the starting part of the deployment sequence that spans 6 months, and it is cruising towards L2, 1.5 million km from the earth.
Webb will see the lights emitted when the first stars were born over 13.</description>
    </item>
    
    <item>
      <title>Hello Ebiten</title>
      <link>https://jaese.github.io/posts/hello-ebiten/</link>
      <pubDate>Sat, 25 Dec 2021 00:41:28 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/hello-ebiten/</guid>
      <description>https://ebiten.org</description>
    </item>
    
    <item>
      <title>(WIP) Dashboard</title>
      <link>https://jaese.github.io/projects/dashboard/</link>
      <pubDate>Wed, 22 Dec 2021 18:43:12 +0900</pubDate>
      
      <guid>https://jaese.github.io/projects/dashboard/</guid>
      <description>Air Quality Index History (Seoul) 서울시 공기질지수
Air Quality Index. Possible values: 1, 2, 3, 4, 5. Where 1 = Good, 2 = Fair, 3 = Moderate, 4 = Poor, 5 = Very Poor.
 OpenWeatherMap Air Pollution API
 const main = async () = { const res = await fetch(&#34;https://weather-adlpwp4faq-du.a.run.app/&#34;); const data = await res.json(); const spec = { &#34;config&#34;: {&#34;view&#34;: {&#34;continuousWidth&#34;: 500, &#34;</description>
    </item>
    
    <item>
      <title>Ray Tracing in One Weekend on WebAssembly</title>
      <link>https://jaese.github.io/posts/ray-tracing-in-one-week/</link>
      <pubDate>Sat, 18 Dec 2021 23:01:01 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/ray-tracing-in-one-week/</guid>
      <description>samples: 
  div.raytracing-content { } canvas { width: 800px; height: 356px; image-rendering: pixelated; image-rendering: crisp-edges; }  import { instantiate } from &#39;/wasm.js&#39;; const width = 320; const height = 180; const samplesElem = document.querySelector(&#39;.samples&#39;); console.log(samplesElem); (async function start() { const memory = new WebAssembly.Memory({initial: 40, maximum: 40}) const importObject = { &#39;env&#39;: { &#39;memory&#39;: memory, }, }; const { instance, module } = await instantiate(&#39;/raytracing.wasm&#39;, importObject); const exports = instance.</description>
    </item>
    
    <item>
      <title>Bifurcation diagram</title>
      <link>https://jaese.github.io/wasm4/bifurcation_diagram/</link>
      <pubDate>Mon, 13 Dec 2021 07:20:47 +0900</pubDate>
      
      <guid>https://jaese.github.io/wasm4/bifurcation_diagram/</guid>
      <description>#game { width: 480px; height: 480px; } #game canvas { width: 100%; height: 100%; image-rendering: pixelated; image-rendering: crisp-edges; }  import { run } from &#34;/wasm4.js&#34;; run(&#34;game&#34;, &#34;\/bifurcation_diagram.wasm&#34;, true);  Controls: arrow keys to pan, X/Z to zoom
cartridge</description>
    </item>
    
    <item>
      <title>Demo wasm4 bindings in Zig</title>
      <link>https://jaese.github.io/wasm4/demo/</link>
      <pubDate>Thu, 18 Nov 2021 22:00:23 +0900</pubDate>
      
      <guid>https://jaese.github.io/wasm4/demo/</guid>
      <description>#game { width: 480px; height: 480px; } #game canvas { width: 100%; height: 100%; image-rendering: pixelated; image-rendering: crisp-edges; }  import { run } from &#34;/wasm4.js&#34;; run(&#34;game&#34;, &#34;\/demo.wasm&#34;, true);  Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108  const std = @import(&amp;#34;std&amp;#34;); const w4 = @import(&amp;#34;wasm4.</description>
    </item>
    
    <item>
      <title>Snake</title>
      <link>https://jaese.github.io/wasm4/snake/</link>
      <pubDate>Wed, 17 Nov 2021 18:17:37 +0900</pubDate>
      
      <guid>https://jaese.github.io/wasm4/snake/</guid>
      <description>#game { width: 480px; height: 480px; } #game canvas { width: 100%; height: 100%; image-rendering: pixelated; image-rendering: crisp-edges; }  import { run } from &#34;/wasm4.js&#34;; run(&#34;game&#34;, &#34;\/snake.wasm&#34;, true);  catridge
https://github.com/jaese/wasm4-snake-zig</description>
    </item>
    
    <item>
      <title>Rotating Cube</title>
      <link>https://jaese.github.io/wasm4/rotating-cube/</link>
      <pubDate>Wed, 17 Nov 2021 18:17:32 +0900</pubDate>
      
      <guid>https://jaese.github.io/wasm4/rotating-cube/</guid>
      <description>#game { width: 480px; height: 480px; } #game canvas { width: 100%; height: 100%; image-rendering: pixelated; image-rendering: crisp-edges; }  import { run } from &#34;/wasm4.js&#34;; run(&#34;game&#34;, &#34;\/graphics.wasm&#34;, true);  catridge
Code in Zig main.zig
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158  // zig build &amp;amp;&amp;amp; w4 run zig-out/lib/main.</description>
    </item>
    
    <item>
      <title>Mandelbrot set</title>
      <link>https://jaese.github.io/wasm4/mandelbrot-set/</link>
      <pubDate>Wed, 17 Nov 2021 17:29:58 +0900</pubDate>
      
      <guid>https://jaese.github.io/wasm4/mandelbrot-set/</guid>
      <description>#game { width: 480px; height: 480px; } #game canvas { width: 100%; height: 100%; image-rendering: pixelated; image-rendering: crisp-edges; }  import { run } from &#34;/wasm4.js&#34;; run(&#34;game&#34;, &#34;\/mandelbrot_wasm4.wasm&#34;, true);  Controls: arrow keys to pan, X/Z to zoom
catridge
Code in Zig 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157  // zig build &amp;amp;&amp;amp; w4 run zig-out/lib/mandelbrot_wasm4.</description>
    </item>
    
    <item>
      <title>WASM-4 and Zig</title>
      <link>https://jaese.github.io/posts/wasm4/</link>
      <pubDate>Mon, 15 Nov 2021 02:34:44 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/wasm4/</guid>
      <description>WASM-4 binaries running on browser  *Fancy* graphics   Press R to reset     .wasm4 { padding: 10px; box-sizing: border-box; } #rotating_cube { width: 320px; height: 320px; } #rotating_cube canvas { width: 100%; height: 100%; image-rendering: pixelated; image-rendering: crisp-edges; } #snake { width: 320px; height: 320px; } #snake canvas { width: 100%; height: 100%; image-rendering: pixelated; image-rendering: crisp-edges; }  import { run } from &#34;</description>
    </item>
    
    <item>
      <title>Controlling CO2 sensor and HD44780 LCD display with Raspberry Pi and Go</title>
      <link>https://jaese.github.io/posts/breath-sensor/</link>
      <pubDate>Tue, 09 Nov 2021 18:58:21 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/breath-sensor/</guid>
      <description>This is a digital gas sensor (CCS811) and an LCD display (HD44780), controlled by Raspberry Pi, that I wired together back in 2019. The CS811 sensor reports two values: &amp;lsquo;equivalent carbon dioxide&amp;rsquo; (eCO2), and &amp;lsquo;Volatile Organic Compounds&amp;rsquo; (VOC), PPM. I am not too sure what those terms mean, not strong on chemistry, but nonetheless I wired it to display the reported values on LCD display continuously. I assume high values mean bad.</description>
    </item>
    
    <item>
      <title>My Blog</title>
      <link>https://jaese.github.io/projects/my-blog/</link>
      <pubDate>Fri, 05 Nov 2021 11:18:29 +0900</pubDate>
      
      <guid>https://jaese.github.io/projects/my-blog/</guid>
      <description>This.</description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>https://jaese.github.io/posts/hello/</link>
      <pubDate>Fri, 05 Nov 2021 10:58:03 +0900</pubDate>
      
      <guid>https://jaese.github.io/posts/hello/</guid>
      <description>My first post.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaese.github.io/feed.json</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaese.github.io/feed.json</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
